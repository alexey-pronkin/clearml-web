/**
 * storage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 999.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */

import {HTTP} from '~/app.constants';
import {SmApiRequestsService} from './api-requests.service';

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
import { ApiOptions }                        from './api';

import { Observable }                                        from 'rxjs';

import { StorageGetSettingsResponse } from '../model/storage/storageGetSettingsResponse';
import { StorageResetSettingsRequest } from '../model/storage/storageResetSettingsRequest';
import { StorageResetSettingsResponse } from '../model/storage/storageResetSettingsResponse';
import { StorageSetSettingsRequest } from '../model/storage/storageSetSettingsRequest';
import { StorageSetSettingsResponse } from '../model/storage/storageSetSettingsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiStorageService {

    protected basePath = HTTP.API_BASE_URL;
    public defaultHeaders = new HttpHeaders({'Accept': 'application/json'});
    public configuration = new Configuration();

    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }



    /**
     * Internal. Get storage settings
     * @param request request body
     * @param options flags and headers to use in webapp
     */
    public storageGetSettings(request: object, options?: ApiOptions): Observable<any> {
        return this.apiRequest.post<StorageGetSettingsResponse>(`${this.basePath}/storage.get_settings`,
            request,
            {
                headers: this.defaultHeaders,
                withCredentials: this.configuration.withCredentials
            },
            options
        );
    }

    /**
     * Internal. Reset selected storage settings
     * @param request request body
     * @param options flags and headers to use in webapp
     */
    public storageResetSettings(request: StorageResetSettingsRequest, options?: ApiOptions): Observable<any> {
        return this.apiRequest.post<StorageResetSettingsResponse>(`${this.basePath}/storage.reset_settings`,
            request,
            {
                headers: this.defaultHeaders,
                withCredentials: this.configuration.withCredentials
            },
            options
        );
    }

    /**
     * Internal. Set Storage settings
     * @param request request body
     * @param options flags and headers to use in webapp
     */
    public storageSetSettings(request: StorageSetSettingsRequest, options?: ApiOptions): Observable<any> {
        return this.apiRequest.post<StorageSetSettingsResponse>(`${this.basePath}/storage.set_settings`,
            request,
            {
                headers: this.defaultHeaders,
                withCredentials: this.configuration.withCredentials
            },
            options
        );
    }

  }
